package ik.Set2;

import java.io.*;
import java.util.*;

public class Palindromes {

    private static final Scanner scan = new Scanner(System.in);
    private static final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        try {
            String s = scan.nextLine().trim();
            if (s != null) {
                bw.write("Generating palindromic decompositions of " + s);
                bw.newLine();
                String[] ret = generate_palindromic_decompositions(s);
                for (String line : ret) {
                    bw.write(line);
                    bw.newLine();
                }
            }
        } catch (NoSuchElementException e) {
            bw.write("No Input Data; aborting");
        } catch (NumberFormatException e) {
            bw.write("Invalid number; aborting");
        }
        bw.close();
    }

    static String[] generate_palindromic_decompositions(String s) {
        int n = s.length();
        // To Store all palindromic partitions
        ArrayList<ArrayList<String>> allPart = new ArrayList<>();
        // To store current palindromic partition
        Deque<String> currPart = new LinkedList<String>();
        // Call recursive function to generate
        // all partiions and store in allPart
        allPalPartitonsUtil(allPart, currPart, 0, n, s);
        // Print all partitions generated by above call
        String[] result = new String[allPart.size()];
        StringBuffer sb;
        for (int i = 0; i < allPart.size(); i++)
        {
            sb = new StringBuffer();
            for (int j = 0; j < allPart.get(i).size(); j++)
            {
                sb.append(allPart.get(i).get(j) + "|");
            }
            result[i] = sb.toString();
        }
        return result;

    }

    // Recursive function to find all palindromic
    // partitions of input[start..n-1] allPart --> A
    // ArrayList of Deque of strings. Every Deque
    // inside it stores a partition currPart --> A
    // Deque of strings to store current partition
    private static void allPalPartitonsUtil(ArrayList<ArrayList<String>> allPart,
                                            Deque<String> currPart, int start, int n, String input)
    {
        // If 'start' has reached len
        if (start >= n)
        {
            allPart.add(new ArrayList<>(currPart));
            return;
        }
        // Pick all possible ending points for substrings
        for (int i = start; i < n; i++)
        {

            // If substring str[start..i] is palindrome
            if (isPalindrome(input, start, i))
            {

                // Add the substring to result
                currPart.addLast(input.substring(start, i + 1));

                // Recur for remaining remaining substring
                allPalPartitonsUtil(allPart, currPart, i + 1, n, input);

                // Remove substring str[start..i] from current
                // partition
                currPart.removeLast();
            }
        }
    }

    // A utility function to check
    // if input is Palindrome
    private static boolean isPalindrome(String input,
                                        int start, int i)
    {
        while (start < i)
        {
            if (input.charAt(start++) != input.charAt(i--))
                return false;
        }
        return true;
    }
}